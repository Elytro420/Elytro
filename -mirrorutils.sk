# 
#
#   ███╗   ███╗██╗██████╗ ██████╗  ██████╗ ██████╗   ██╗   ██╗████████╗██╗██╗     ███████╗
#   ████╗ ████║██║██╔══██╗██╔══██╗██╔═══██╗██╔══██╗  ██║   ██║╚══██╔══╝██║██║     ██╔════╝
#   ██╔████╔██║██║██████╔╝██████╔╝██║   ██║██████╔╝  ██║   ██║   ██║   ██║██║     ███████╗
#   ██║╚██╔╝██║██║██╔══██╗██╔══██╗██║   ██║██╔══██╗  ██║   ██║   ██║   ██║██║     ╚════██║
#   ██║ ╚═╝ ██║██║██║  ██║██║  ██║╚██████╔╝██║  ██║  ╚██████╔╝   ██║   ██║███████╗███████║
#   ╚═╝     ╚═╝╚═╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═╝   ╚═════╝    ╚═╝   ╚═╝╚══════╝╚══════╝
#   by EWS (Trademark)
#
#   ABOUT
#     This API has many functions that may help you with scripts of
#     various types, like RegEx, number formatting, easy replace,
#     random string, blocks between and some APIs.
#
#   NOTES
#     MirrorUtils is a free resource made for the Skript community. Use and
#     redistribute it freely, but please keep the credits.
#
#   CONTACT
#     For issues (not questions) or script requests, please contact me by:
#     + Discord: EWS#5810
#     + Email: ewsjogos@gmail.com
#
#   REQUIREMENTS
#     + Skript dev36+
#     + skript-mirror 2.0.0
# 
#   VERSION
#     + 2.0.1
#

import:
	# JAVA
	
	# Lang
	java.lang.System
	
	# RegEx
	java.util.regex.Pattern
	java.util.regex.Matcher
	
	# Text
	java.text.DecimalFormat
	java.text.DecimalFormatSymbols
	
	# Util
	java.util.ArrayList
	java.util.Map$Entry
	java.util.Collections

	# SKRIPT
	ch.njol.skript.Skript
	ch.njol.skript.variables.Variables
	
	# APACHE
	org.apache.commons.lang.time.DurationFormatUtils
	org.apache.commons.lang3.RandomStringUtils
	org.apache.commons.lang3.StringUtils
	org.apache.commons.lang3.text.WordUtils
	
	# GUAVA
	com.google.common.base.Splitter
	
	# BUKKIT
	org.bukkit.inventory.ItemFlag
	org.bukkit.inventory.meta.ItemMeta
	
local effect set variable %object% to %object% in %event%:
	trigger:
		set {_name} to expr-1.getName().toString(expr-3)
		Variables.setVariable({_name}, expr-2, expr-3 and expr-1.isLocal())
		
local expression variable %objects% in %event%:
	return type: object
	get:
		set {_name} to expr-1.getName().toString(expr-2)
		return Variables.getVariable({_name}, expr-2 and expr-1.isLocal())

#   ooooooooo.                        oooooooooooo                  ooooo     ooo     .    o8o  oooo           
#   `888   `Y88.                      `888'     `8                  `888'     `8'   .o8    `"'  `888           
#    888   .d88'  .ooooo.   .oooooooo  888         oooo    ooo       888       8  .o888oo oooo   888   .oooo.o 
#    888ooo88P'  d88' `88b 888' `88b   888oooo8     `88b..8P'        888       8    888   `888   888  d88(  "8 
#    888`88b.    888ooo888 888   888   888    "       Y888'          888       8    888    888   888  `"Y88b.  
#    888  `88b.  888    .o `88bod8P'   888       o  .o8"'88b         `88.    .8'    888 .  888   888  o.  )88b 
#   o888o  o888o `Y8bod8P' `8oooooo.  o888ooooood8 o88'   888o         `YbodP'      "888" o888o o888o 8""888P' 
#                          d"     YD                                                                           
#                          "Y88888P'    

#
# REGEX MATCHES
# Checks whether a regular expression matches a string.
#
# Usage:
# + if "abc123" regex matches "[a-z]{3}[0-9]{3}":
# Result: [condition] passes
#
condition %string% regex matches %string%:
	check:
		expr-1.matches(expr-2) = true
		continue
#
# Usage:
# + regex replace "( )+" with " " in "a     retard    used    2 many   spaces"
# Result: [string] "a retard used 2 many spaces"
		
#
# REGEX REPLACE
# Replaces a regular expression in a string with another string.
#
# Usage:
# + regex replace "[0-9]" with "" in "no numbers allowed 1236128"
# Result: [string] "no numbers allowed "
#		
expression regex replace %string% with %string% in %string%:
	return type: string
	get:
		return expr-3.replaceAll(expr-1, expr-2)
		
#
# REGEX SPLITS
# Splits a string using a regular expression.
#
# Usage:
# + regex split "something, stuff and other things" at "(, | and )"
# Result: [strings] "something", "stuff" and "other things"
#
plural expression regex split %string% (at|by) %string%:
	return type: strings
	get:
		return ...expr-1.split(expr-2)
		
#
# MATCHER OF STRING
# Gets the regular expression matcher in a string.
# Use it combined with regex groups and matcher has another find.
#
# Usage:
# + match "item(diamond_sword) name(some name)" to "item\((.+?)\)"
# Result: [matcher]
#
expression [regex] match %string% to %string%:
	return type: object
	get:
		return Pattern.compile(expr-2).matcher(expr-1)
	
#
# REGEX GROUPS OF MATCHER
# Gets the regular expression groups from a matcher.
# A matcher is obtained from the expression above.
#
# Note that using this expression will reset the matcher
# and will only give you a single group.
#
# Usage:
# + set {_matcher} to match "item\((.+?)\)" in "item(diamond_sword) name(some name)"
# + groups 1 of {_matcher}
# Result: [list] "diamond sword"
#
plural expression groups %number% of match[er] %object%:
	return type: texts
	get:
		if expr-2 is instance of Matcher:
			expr-2.reset()
			set {_matches} to new ArrayList()
			while expr-2.find() = true:
				{_matches}.add(expr-2.group(expr-1))
			return ...{_matches}
		else:
			Skript.error("%expr-2 ? raw expr-2% is not a valid RegEx matcher.")
			return
		
#
# MATCHER HAS ANOTHER MATCH
# Uses matcher.find() to check if there's another RegEx match.
# Also passes to the next group, so you can use get it with the expression below.
#
# Usage:
# + set {_matcher} to match "item(diamond_sword) name(some name)" to "item\((.+?)\)"
# + if {_matcher} has another find:
# Result: [condition] passes
#
condition %object% (has (another (find|match)|next)):
	check:
		if expr-1 is instance of Matcher:
			expr-1.find() = true
			continue
		else:
			Skript.error("%expr-1 ? raw expr-1% is not a valid RegEx matcher.")
		
#
# CURRENT GROUP OF MATCHER
# Gets the current group of a matcher.
# Useful when you need to capture multiple groups at once.
#
# Use combined with the condition above.
#
# Usage:
# + set {_matcher} to match "item(diamond sword) name(some name)" to "(.+?)\((.+?)\)"
# + if {_matcher} has another find:
# + 	set {_type} to current group 1 of {_matcher}
# + 	set {_content} to current group 2 of {_matcher}
# Result: [string] "item"
#         [string] "diamond sword"
#
expression current group %number% of [match[er]] %object%:
	return type: string
	get:
		if expr-2 is instance of Matcher:
			return try expr-2.group(expr-1)
		else:
			Skript.error("%expr-2 ? raw expr-2% is not a valid RegEx matcher.")
			return
			
#   
#    .oooooo..o     .             o8o                              ooooo     ooo     .    o8o  oooo           
#   d8P'    `Y8   .o8             `"'                              `888'     `8'   .o8    `"'  `888           
#   Y88bo.      .o888oo oooo d8b oooo  ooo. .oo.    .oooooooo       888       8  .o888oo oooo   888   .oooo.o 
#    `"Y8888o.    888   `888""8P `888  `888P"Y88b  888' `88b        888       8    888   `888   888  d88(  "8 
#        `"Y88b   888    888      888   888   888  888   888        888       8    888    888   888  `"Y88b.  
#   oo     .d8P   888 .  888      888   888   888  `88bod8P'        `88.    .8'    888 .  888   888  o.  )88b 
#   8""88888P'    "888" d888b    o888o o888o o888o `8oooooo.          `YbodP'      "888" o888o o888o 8""888P' 
#                                                  d"     YD                                                  
#                                                  "Y88888P' 

#
# NEW LINE
# Works the same as skQuery's.
# Useful when you want to store a multiple line text in a single variable.
#
# Usage:
# + set {_nolist} to join "a", "b" and "c" by newline
# Result: [string] "a(another line)b(another line)c"
#
expression (new[ ]line|nl|cr):
	return type: string
	get:
		return last character of System.getProperty("line.separator")     

#
# RANDOM STRING WITH CHARACTERS
# Returns a random string with predefined characters.
#
# Usage:
# + random string with size 8 and characters "abcde12345"
# Result: [string] "bd351adc"
#
expression random string with size %number% and characters %string%:
	return type: string
	get:
		return RandomStringUtils.random(expr-1, expr-2)

#
# SPLIT EVERY N
# Splits a string every n characters.
#
# Usage:
# + split "ad13ff56dd33" every 2 characters
# Result: [strings] "ad", "13", "ff", "56", "dd" and "33"
#
plural expression split %string% every %number% char[racter]s:
	return type: strings
	get:
		return ...Splitter.fixedLength(expr-2).split(expr-1)
		
#
# TRIM STRING
# Removes leading and trailing spaces from a string.
#
# Usage:
# + trimmed "   useless spaces before and after   "
# Result: [string] "useless spaces before and after"
#
expression trim[med] %string%:
	return type: strings
	get:
		return expr-1.trim()
		
#
# REVERSED STRING
# Reverses a string, making the first character be the last and so on.
#
# Usage:
# + reversed "abc"
# Result: [string] "cba"
#
expression reverse[d] %string%:
	return type: string
	get:
		return StringUtils.reverse(expr-1)
		
#
# SCRAMBLED STRING
# Scrambles a string, putting all characters in random places.
#
# Usage:
# + scrambled "hello"
# Result: [string] "olelh"
#
expression scramble[d] %string%:
	return type: string
	get:
		return RandomStringUtils.random((length of expr-1), expr-1)
		
# 
# STRING IN CAMEL CASE
# Converts a string to camel case.
# Camel Case Is Writing Like This And Is Not Grammatically Correct.
#
# Usage:
# + "hello mate, how you doing"
# Result: [string] "Hello Mate, How You Doing"
#
expression %string% in camel[ ]case:
	return type: string
	get:
		return WordUtils.capitalizeFully(expr-1, " ")
		
#
# UPSIDE DOWN STRING
# Flips all letters, making them upside down.
#
# Usage:
# + "upside down "hello"
# Result: [string] "ɥǝןןo"
#
expression (upside[-| ]down|flip[ped]) %string%:
	return type: string
	get:
		set {_characters} to "abcdefghijklmnopqrstuvwxyz_,;.?!/\'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
		set {_charactersflipped} to "ɐqɔpǝɟbɥıظʞןɯuodbɹsʇnʌʍxʎz‾'؛˙¿¡/\,∀qϽᗡƎℲƃHIſʞ˥WNOԀὉᴚS⊥∩ΛMXʎZ0ƖᄅƐㄣϛ9ㄥ86"
		
		set {_upsidedown} to ""
		loop (length of expr-1) times:
			set {_char} to expr-1.charAt(loop-value - 1)
			
			set {_index} to {_characters}.indexOf({_char}.toString())
			if {_index} != -1:
				set {_upsidedown} to {_upsidedown}.concat({_charactersflipped}.charAt({_index}).toString())
			else:
				set {_upsidedown} to {_upsidedown}.concat({_char}.toString())
		return {_upsidedown}

#
# STRING WITH CASE SWAPPED
# Swaps the case of a string.
#
# Usage:
# + "i AM RETARDed" with case swapped
# Result: [string] "I am retardED"
#
expression %string% with case[s] (switched|swapped):
	get:
		return StringUtils.swapCase(expr-1)
		
#
# STRING IS OF CHARACTER TYPE
# Checks if a string only has one type of characters.
#
# Usage:
# + "abc123" is alphabetic
# Result: [condition] does not pass
#
condition %string% is (1¦(unicode|alpha)|2¦alphanumeric|3¦alphabetic|4¦all lowercase|5¦all uppercase):
	check:
		if parse mark = 1:
			set {_boolean} to StringUtils.isAlpha(expr-1)
		else if parse mark = 2:
			set {_boolean} to StringUtils.isAlphanumeric(expr-1)
		else if parse mark = 3:
			set {_boolean} to StringUtils.isAlphabetic(expr-1)
		else if parse mark = 4:
			set {_boolean} to StringUtils.isAllLowerCase(expr-1)
		else:
			set {_boolean} to StringUtils.isAllUpperCase(expr-1)
		continue if {_boolean} = true

# 
# DIFFERENCE BETWEEN STRINGS
# Gets where two strings differ.
# Note that it only returns the remainder of the second string.
#
# Usage:
# + difference between "i am amazing" and "i am dumb"
# + difference between "abc" and "ab"
# Result: [string] "dumb"
#         [string] "" # the if it was the opposite, it'd return "c"
#
expression difference between %string% and %string%:
	return type: string
	get:
		return StringUtils.difference(expr-1, expr-2)
		
#
# NUMBER OF STRING OCCURENCES
# Counts how many times a string appears inside another.
#
# Usage:
# + number of occurences of "a" in "what is up mate"
# Result: [number] 2
#
expression number of occurences of %string% in %string%:
	return type: number
	get:
		return StringUtils.countMatches(expr-1, expr-2)
		
#
# RAINBOW STRING
# Colors a string randomly, with preset colors or any color.
#
# Usage:
# + rainbow "hello" with colors "a", "b", "c", "d" and "e" every 2 characters
# Result: [string] "&bh&ce&el&ll&co"
#
expression rainbow %string% [with colors %-strings%] every (1¦%-number% char[acter][s]|2¦substring %-string%):
	return type: string
	get:
		if exprs-2 is not set:
			set {_colors::*} to "a", "b", "c", "d", "e", "f", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"
		else:
			set {_colors::*} to exprs-2
			
		set {_size} to size of {_colors::*}
		set {_colors::*} to shuffled {_colors::*}
		if parse mark = 1:
			loop split expr-1 at " ":
				add 1 to {_n}
				set {_rainbow::%{_n}%} to ""
				loop (split loop-value every expr-3 chars):
					add 1 to {_color}
					set {_rainbow::%{_n}%} to {_rainbow::%{_n}%}.concat("&%{_colors::%{_color}%}%%loop-value-2%")
					
					if {_color} = {_size}:
						set {_colors::*} to shuffled {_colors::*}
						set {_color} to 0
			return colored (join {_rainbow::*} by " ")
		else:
			set {_rainbow} to ""
			loop split expr-1 at expr-4:
				set {_rainbow} to {_rainbow}.concat("&%random element of {_colors::*}%%loop-value%%expr-4%")
			return colored {_rainbow}
			
#
# SIMILARITY BETWEEN STRINGS
# Gets de Jaro-Winkler distance between two strings.
# The result is between 0 and 1, with 1 being the same string.
#
# Usage:
# + similarity between "what is up" and "what's up"
# Result: [number] 0.93
#
expression (similarity|string distance) between %string% and %string%:
	return type: number
	get:
		# DEPRECATED, BUT WHO CARES?
		return StringUtils.getJaroWinklerDistance(expr-1, expr-2)
		
#
# STRING WITHOUT EXTRA SPACES
# Removes extra spaces between characters in and trims a string.
#
# Usage:
# + "   poorly   spaced string  "
# Result: [string] "poorly spaced string"
#
expression %string% (with no|without) (repeated|extra) [white[ ]]spaces:
	return type: string
	get:
		return (trimmed expr-1).replaceAll("\s{2,}", " ")
		
#
# SUBSTRING
# Allows you to get the substring without the second argument.
# Instead, defaults it to the size of the string.
#
# Usage:
# + substring of "abcdefghijk" from 6
# Result: [string] "fghijk"
# 
expression sub(text|string) of %text% (from|char[racter][s]) %integer%:
	return type: text
	get:
		return expr-1.substring(expr-2)
		
#
# STRING EXACTLY EQUALS
# Checks if a string is exactly equals to another, including case.
#
# Usage:
# + "ABC" exactly equals to "abc"
# Result: [condition] does not pass
#
condition %text% [is] exactly equals [to] %text%:
	check:
		expr-1.equals(expr-2)
		continue
		
#
# ARGUMENT AT
# Treats the string as a command, getting the nth argument.
#
# Usage:
# + argument at 2 of "/gm 1 person"
# Result: [string] "1"
#
expression argument [at] %integer% of %text%:
	return type: text
	get:
		return expr-1th element of (regex split expr-2 at "( )+")
		
#
# REPLACER
# Replaces muliple strings with others in the same line.
#
# Usage:
# + set {_fix} to replacer "a", "b" and "c" with "d", "e" and "f" in "abcghi"
# Result: [string] "defghi"
#
expression (multi[ple] replace|replacer) [(elements|values)] %texts% with %objects% in %text%:
	return type: text
	get:
		set {_text} to expr-3
		loop exprs-1:
			add 1 to {_n}
			replace all "%loop-value%" with "%{_n}th element of exprs-2%" in {_text}
		return {_text}

#
# RANDOM STRING
# Generates a random string of some type.
#
# Usage:
# + set {_b} to random alphanumeric with size 12
# Result: [string] mlx7ca6lo301
#
expression random (1¦alphanumeric|2¦alphabetic|3¦numeric|4¦ascii|5¦graph) [(text|string)] [with] (size|length) %integer%:
	return type: text
	get:
		if parse mark = 1:
			return RandomStringUtils.randomAlphanumeric(expr-1)
		else if parse mark = 2:
			return RandomStringUtils.randomAlphabetic(expr-1)
		else if parse mark = 3:
			return RandomStringUtils.randomNumeric(expr-1)
		else if parse mark = 4:
			return RandomStringUtils.randomAscii(expr-1)
		else:
			return RandomStringUtils.randomGraph(expr-1)		


#   ooooo      ooo                                .o8                               ooooo     ooo     .    o8o  oooo           
#   `888b.     `8'                               "888                               `888'     `8'   .o8    `"'  `888           
#    8 `88b.    8  oooo  oooo  ooo. .oo.  .oo.    888oooo.   .ooooo.  oooo d8b       888       8  .o888oo oooo   888   .oooo.o 
#    8   `88b.  8  `888  `888  `888P"Y88bP"Y88b   d88' `88b d88' `88b `888""8P       888       8    888   `888   888  d88(  "8 
#    8     `88b.8   888   888   888   888   888   888   888 888ooo888  888           888       8    888    888   888  `"Y88b.  
#    8       `888   888   888   888   888   888   888   888 888    .o  888           `88.    .8'    888 .  888   888  o.  )88b 
#   o8o        `8   `V88V"V8P' o888o o888o o888o  `Y8bod8P' `Y8bod8P' d888b            `YbodP'      "888" o888o o888o 8""888P'

#
# PI
# Returns the value of pi.
#
# Usage:
# + set {_n} to pi
# Result: [number] 3.141592653589
#
expression pi:
	return type: number
	get:
		return 3.141592653589

#
# EULER'S NUMBER
# Returns the value of e.
#
# Usage:
# + set {_n} to euler's number
# Result: [number] 2.718281828459
#
expression euler's [number]:
	return type: number
	get:
		return 2.718281828459
#
# PHI
# Returns the value of phi.
#
# Usage:
# + set {_n} to phi
# Result: [number] 1.618033988749
#
expression phi:
	return type: number
	get:
		return 1.618033988749
		
#
# ROUND TO N
# Rounds a number to n decimal places.
#
# Usage: round pi to 2
# Result: [number] 3.14
#
expression round %number% to %number% [decimal] [places]:
	return type: numbers
	get:
		return floor((expr-1 * 10^expr-2) + 0.5) / 10^expr-2
		
#
# NUMBER TO DECIMAL FORMAT
# Converts a number to any decimal format. Remember that % and # must be doubled.
# See https://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html
# 
# Usage:
# + 9.95 with decimal format "000.######"
# Result: [string] 009.95
#
expression %number% with decimal format %string%:
	return type: string
	get:
		return (new DecimalFormat(expr-2)).format(expr-2)
		
#
# FORMAT NUMBER
# Formats a number to make it more readable (1,000,000).
# Optional use of custom characters.
# 
# Usage:
# + 10000 always formatted with 2 decimal places and separators "!", ":"
# Result: [string] 10!000:00
#
expression %number% [(1¦always)] formatted with %number% [decimal] places [(2¦and separators %-string%, %-string%)]:
	return type: string
	get:
		if parse mark = 2:
			length of expr-3 = 1
			length of expr-4 = 1
			set {_symbols} to new DecimalFormatSymbols()
			{_symbols}.setDecimalSeparator(expr-4)
			{_symbols}.setGroupingSeparator(expr-3)
			set {_dformat} to new DecimalFormat("##,######", {_symbols})
		else:
			set {_dformat} to new DecimalFormat("##,######")
			
		if parse mark = 1 or 3:
			{_dformat}.setMinimumFractionDigits(expr-2)
		{_dformat}.setMaximumFractionDigits(expr-2)
		return {_dformat}.format(expr-1)
		
#
# NUMBER TO ROMAN NUMERAL
# Converts a number to a roman numeral.
#
# Usage:
# + 998 to roman numeral
# Result: [string] "CMXCVIII"
# 
expression %number% (to|in) roman [numeral]:
	return type: text
	get:
		set {_n} to expr-1
		
		set {_roman::*} to "M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV" and "I"
		loop 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4 and 1:
			add 1 to {_index}
			while {_n} >= loop-value:
				add 1 to {_next}
				remove loop-value from {_n}
				set {_result::%{_next}%} to {_roman::%{_index}%}
			
		return (join {_result::*} by "") ? "0"
		
#
# ROMAN NUMERAL TO NUMBER
# Converts a roman numeral to a number.
# 
# Usage:
# + roman numeral "XIII" to number
# Result: [number] 8
#
expression roman [numeral] %string% to number:
	return type: number
	get:
		set {_numbers::*} to 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4 and 1
		loop "M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV" and "I":
			add 1 to {_n}
			expr-1.startsWith(loop-value) = true
			set {_next} to roman numeral expr-1.substring(loop-value.length()) to number
			return {_numbers::%{_n}%} + {_next}
		return 0
		
#
# NUMBER TO WORDS
# Converts a number into words.
#
# Usage:
# + number 1945 to words
# Result: [string] one thousand, nine hundred and forty-five.
#
expression number %number% to words:
	return type: string
	get:
		loop 33, 30, 27, 24, 21, 18, 15, 12, 9 and 6:
			add 1 to {_next}
			set {_numbers::%{_next}%} to 10^loop-value
		loop split "1000,100,90,80,70,60,50,40,30,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1" at ",":
			add 1 to {_next}
			set {_numbers::%{_next}%} to loop-value parsed as number
		set {_words::*} to split "decillion,nonillion,octillion,septillion,sextillion,quintillion,quadrillion,trillion,billion,million,thousand,hundred,ninety,eighty,seventy,sixty,fifty,forty,thirty,twenty,nineteen,eighteen,seventeen,sixteen,fifteen,fourteen,thirteen,twelve,eleven,ten,nine,eight,seven,six,five,four,three,two,one" at ","
		
		set {_n} to expr-1

		loop {_numbers::*}:
			set {_unit} to floor({_n} / loop-value)
			remove loop-value * {_unit} from {_n}

			{_unit} >= 1
				
			add 1 to {_index}
			if {_unit} = 1:
				if loop-value < 100:
					if loop-value < 20:
						set {_r::%{_index}%} to "%{_words::%loop-index%}%"
					else if mod(expr-1, 10) = 0:
						set {_r::%{_index}%} to "%{_words::%loop-index%}%"
					else:
						set {_r::%{_index}%} to "%{_words::%loop-index%}%-"
				else:
					set {_r::%{_index}%} to "one %{_words::%loop-index%}%, "
			else:
				set {_r::%{_index}%} to "%number {_unit} to words% %{_words::%loop-index%}%, "
			
		return (join {_r::*} by "").replaceFirst("(,)([^,]*)$", " and$2")
		
#
# ORDINAL OF NUMBER
# Gives you a number's ordinal counterpart.
#
# Usage:
# + ordinal of 3
# Result: [string] "3rd"
#
expression ordinal [of] %integer%:
	return type: text
	get:
		set {_ordinals::*} to "th", "st", "nd", "rd", "th", "th", "th", "th", "th" and "th"
		set {_n} to mod(expr-1, 100)
		if {_n} = 11, 12 or 13:
			return "%expr-1%th"
		else:
			return "%expr-1%%{_ordinals::%{_n}%}%"
		
#
# i++
# Adds/removes one (or any other value) to a variable.
#
# Usage:
# + {_i}++2
# Result: {_i} = 2
effect %object%(1¦++|2¦--)[%-number%]:
	trigger:
		set {_o} to expr-1
		set {_n} to expr-2 ? 1
		if parse mark = 1:
			set variable (raw expr-1) to ({_o} + {_n}) in event
		else:
			set variable (raw expr-1) to ({_o} - {_n}) in event
			
#
# TOP N ELEMENTS
# Gives you a list of formatted strings with the top/last values of a list.
#
# Usage:
# + top 1 elements of {_money::*} formatted as "<pos>. <index> has $<value>."
# Result: [strings] "1. TrademarkTM has $10000."
#
plural expression (1¦(top|first)|2¦(last)) %integer% (values|elements) of %objects% [formatted] as %text%:
	return type: texts
	get:
		set {_map} to variable raw exprs-2 in event
			
		set {_list} to new ArrayList({_map}.entrySet())
		{_list}.sort(Entry.comparingByValue())
		
		if parse mark = 1:
			Collections.reverse({_list})
		
		loop ...{_list}:
			add 1 to {_n}
			set {_r::%{_n}%} to replacer "<pos>", "<index>" and "<value>" with "%{_n}%", "%loop-value.getKey()%" and "%loop-value.getValue()%" in expr-3
			{_n} = expr-1
			stop loop

		return {_r::*}
		
#
# COMPACTED NUMBER
# Formats a number using letters (10k, 3.45M).
#
# Usage:
# + compacted 53430 rounded to 1
# Result: [string] "53.4k"
#
expression compacted %number% [round[ed] to %-number%]:
	return type: text
	get:
		set {_formats::*} to 18, 15, 12, 9, 6 and 3
		set {_formatnames::*} to "QT", "Q", "T", "B", "M" and "k"
		
		set {_value} to expr-1
		set {_round} to expr-2 ? 1
		loop {_formats::*}:
			expr-1 >= 10^loop-value
			return "%round (expr-1 / (10^loop-value)) to {_round}%%{_formatnames::%loop-index%}%"
		return expr-1

#   ooooooooooooo  o8o                                   ooooo     ooo     .    o8o  oooo           
#   8'   888   `8  `"'                                   `888'     `8'   .o8    `"'  `888           
#        888      oooo  ooo. .oo.  .oo.    .ooooo.        888       8  .o888oo oooo   888   .oooo.o 
#        888      `888  `888P"Y88bP"Y88b  d88' `88b       888       8    888   `888   888  d88(  "8 
#        888       888   888   888   888  888ooo888       888       8    888    888   888  `"Y88b.  
#        888       888   888   888   888  888    .o       `88.    .8'    888 .  888   888  o.  )88b 
#       o888o     o888o o888o o888o o888o `Y8bod8P'         `YbodP'      "888" o888o o888o 8""888P' 

#
# MILLISECONDS
# Shows the current milliseconds since January 1st, 1970.
# Same as unix timestamp, but times 1000.
# 
# Usage:
# + set {_ms} to ms
# + <insert random code here>
# + send "Your code took %ms - {_ms}% milliseconds!"
# Result: [number] 1557865642188
#
expression [current] m[illi]s[econds]:
	return type: number
	get:
		return System.currentTimeMillis()
		
#
# FORMATTED SECONDS
# Changes seconds (number) to any time format you want.
# Check https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/time/DurationFormatUtils.html.
#
# Usage:
# + format 10000 into "y 'years', M 'months', d 'days', H 'hours', m 'minutes', s 'seconds', S 'milliseconds'"
# Result: [string] "0 years, 0 months, 0 days, 2 hours, 46 minutes, 40 seconds"
#
expression %number% second[s] [formatted] (into|as) %text%:
	return type: text
	get:
		return DurationFormatUtils.formatDuration((expr-1 * 1000) and expr-2)
		
#
# STRING TO SECONDS
# Converts a string into seconds.
# The format goes like this: 1y 10mo 5w 3d 1h 52min 10s (spaces not required)
#
# Usage:
# + text "9d4h10m" in seconds
# Result: [number] 792000
#		 
expression %text% (to|in) seconds:
	return type: number
	get:
		set {_matcher} to match expr-1 to "([0-9]+)([a-zA-Z]+)"
		
		while {_matcher} has another match:
			set {_value} to (current group 1 of {_matcher}) parsed as number
			set {_type} to current group 2 of {_matcher}
			if {_type} = "year" or "y":
				add (31104000 * {_value}) to {_r}
			else if {_type} = "month" or "mo":
				add (2592000 * {_value}) to {_r}
			else if {_type} = "week" or "w":
				add (604800 * {_value}) to {_r}
			else if {_type} = "day" or "d":
				add (86400 * {_value}) to {_r}
			else if {_type} = "hour" or "h":
				add (3600 * {_value}) to {_r}
			else if {_type} = "min" or "m":
				add (60 * {_value}) to {_r}
			else if {_type} = "sec" or "s":
				add {_value} to {_r}

		return {_r} ? 0
		
#
# TIMESPAN TO SECONDS
# Converts a Skript timespan to seconds.
# 
# Usage:
# + 10 minutes to seconds
# Result: [number] 600
#
expression %timespan% (to|in) seconds:
	return type: number
	get:
		set {_matcher} to match "%expr-1%" to "([0-9\.]+?)\s([a-zA-Z]+)"
		
		while {_matcher} has another match:
			set {_value} to (current group 1 of {_matcher}) parsed as number
			set {_type} to current group 2 of {_matcher}
			if {_type} = "years" or "year":
				add (31104000 * {_value}) to {_r}
			else if {_type} = "months" or "month":
				add (2592000 * {_value}) to {_r}
			else if {_type} = "weeks" or "week":
				add (604800 * {_value}) to {_r}
			else if {_type} = "days" or "day":
				add (86400 * {_value}) to {_r}
			else if {_type} = "hours" or "hour":
				add (3600 * {_value}) to {_r}
			else if {_type} = "minutes" or "minute":
				add (60 * {_value}) to {_r}
			else if {_type} = "seconds" or "second":
				add {_value} to {_r}

		return {_r} ? 0
		  
#   8888888b.  888                                         888     888 888    d8b 888          
#   888   Y88b 888                                         888     888 888    Y8P 888          
#   888    888 888                                         888     888 888        888          
#   888   d88P 888  8888b.  888  888  .d88b.  888d888      888     888 888888 888 888 .d8888b  
#   8888888P"  888     "88b 888  888 d8P  Y8b 888P"        888     888 888    888 888 88K      
#   888        888 .d888888 888  888 88888888 888          888     888 888    888 888 "Y8888b. 
#   888        888 888  888 Y88b 888 Y8b.     888          Y88b. .d88P Y88b.  888 888      X88 
#   888        888 "Y888888  "Y88888  "Y8888  888           "Y88888P"   "Y888 888 888  88888P' 
#                                888                                                           
#                           Y8b d88P                                                           
#                            "Y88P"

#
# ENTITY HAS POTIONS
# Continues if the entity has those enchants in their respective levels.
#
# Usage:
# + player has speed and strength levels 1 and 2
# Result: [condition] passes / doesn't
#
condition %livingentity% has [potion] [effect[s]] %potiontypes% [level[s]] [%-integers%]:
	check:
		set {_s} to size of {_effects::*}
		
		loop exprs-2:
			add 1 to {_n}
			loop ...expr-1.getActivePotionEffects():
				loop-value-2.getType() = loop-value-1
				if exprs-3 is not set:
					add 1 to {_has}
				else:
					loop-value-2.getAmplifier() + 1 = {_n}th element of exprs-3
					add 1 to {_has}
			{_s} + {_has} != {_s} + {_n}
			stop
		{_has} = {_s}
		continue
		
#
# DURATION OF POTION
# Returns the duration (in seconds) of that potion in an entity.
#
# Usage:
# + duration of speed of player
# Result: [number] 120
# 
expression duration of [potion] [effect] %potiontype% (on|of) %livingentity%:
	return type: number
	get:
		return (expr-2.getPotionEffect(expr-1).getDuration() ? 0) / 20
		
#
# TIER OF POTION
# Returns the level of the potion applied to an entity.
#
# Usage:
# + tier of strength on player's targeted entity
# Result: [number] 2
#
expression tier of [potion] [effect] %potiontype% (on|of) %livingentity%:
	return type: number
	get:
		return (expr-2.getPotionEffect(expr-1) ? -1) + 1

#   888                                888    d8b                        888     888 888    d8b 888          
#   888                                888    Y8P                        888     888 888    Y8P 888          
#   888                                888                               888     888 888        888          
#   888      .d88b.   .d8888b  8888b.  888888 888  .d88b.  88888b.       888     888 888888 888 888 .d8888b  
#   888     d88""88b d88P"        "88b 888    888 d88""88b 888 "88b      888     888 888    888 888 88K      
#   888     888  888 888      .d888888 888    888 888  888 888  888      888     888 888    888 888 "Y8888b. 
#   888     Y88..88P Y88b.    888  888 Y88b.  888 Y88..88P 888  888      Y88b. .d88P Y88b.  888 888      X88 
#   88888888 "Y88P"   "Y8888P "Y888888  "Y888 888  "Y88P"  888  888       "Y88888P"   "Y888 888 888  88888P'

#
# DIRECTION NAME
# Returns the first letter of the direction of a location. (N, S, E, W)
# Use "with cardinals" to include SW, NW, NE and SE.
#
# Usage:
# + direction name of player's location with cardinals
# Result: [text] NW
#
expression direction name of %location% [(1¦with cardinals)]:
	return type: text
	get:
		set {_yaw} to yaw of expr-1
		if parse mark = 1:
			set {_directions::*} to "S", "SW", "W", "NW", "N", "NE", "E" and "SE" 
			set {_values::*} to 30, 60, 120, 150, 210, 240, 300 and 330
		else:
			set {_directions::*} to "S", "W", "N" and "E"
			set {_values::*} to 45, 135, 225 and 315
		loop {_values::*}:
			{_yaw} < loop-value
			return {_directions::%loop-index%}
		return "S"
		
#
# BLOCKS FROM A TO B
# Gets the blocks between two locations.
#
# Usage:
# + blocks from player's location to player's targeted block
# + set blocks from {pos1} to {pos2} to diamond block
# Result: [blocks] (loopable list)
#         [sets the blocks]
#
plural expression blocks (from|within) %location% (to|and) %location%:
	loop of: block
	return type: blocks
	get:
	
		set {_1} to expr-1
		set {_2} to expr-2
		
		set {_x} to 1
		set {_y} to 1
		set {_z} to 1
		
		if x coord of {_1} > x coord of {_2}:
			set {_x} to -1
		if y coord of {_1} > y coord of {_2}:
			set {_y} to -1
		if z coord of {_1} > z coord of {_2}:
			set {_z} to -1
		
		set {_base1} to {_1}
		loop abs(x coord of {_1} - x coord of {_2}) + 1 times:
			loop abs(z coord of {_1} - z coord of {_2}) + 1 times:
				loop abs(y coord of {_1} - y coord of {_2}) + 1 times:
		
					add 1 to {_next}
					set {_b::%{_next}%} to block at {_1}
				
					add {_y} to y coord of {_1}
			
				add {_z} to z coord of {_1}
				set y coord of {_1} to y coord of {_base1}
		
			add {_x} to x coord of {_1}
			set z coord of {_1} to z coord of {_base1}
		return {_b::*}
		
	set:
		loop blocks from expr-1 and expr-2:
			set block at loop-value to change value

#   8888888 888                               888     888 888    d8b 888          
#     888   888                               888     888 888    Y8P 888          
#     888   888                               888     888 888        888          
#     888   888888 .d88b.  88888b.d88b.       888     888 888888 888 888 .d8888b  
#     888   888   d8P  Y8b 888 "888 "88b      888     888 888    888 888 88K      
#     888   888   88888888 888  888  888      888     888 888    888 888 "Y8888b. 
#     888   Y88b. Y8b.     888  888  888      Y88b. .d88P Y88b.  888 888      X88 
#   8888888  "Y888 "Y8888  888  888  888       "Y88888P"   "Y888 888 888  88888P'      

#
# HIDE FLAGS
# Hides flags of an item. Examples:
# When on body: +5 armor
# When in main hand: 1.6 attack speed
#
# Use "ALL" to hide all the flags.
#
# Usage:
# + diamond sword with hideflags "ATTRIBUTES", "DESTROYS", "ENCHANTS", "PLACED_ON", "POTION_EFFECTS" and "UNBREAKABLE"
# Result: [item] diamond sword
#
expression %item% with [(item|hidden|hide)][ ]flags %texts%:
	return type: item
	get:
		if expr-1 = air:
			return
		else:
			set {_meta} to expr-1.getItemMeta()
			if 1st element of exprs-2 = "ALL":
				{_meta}.addItemFlags(ItemFlag.values())
			else:
				loop exprs-2:
					set {_flag} to try ItemFlag.valueOf("HIDE_%loop-value%" in upper case)
					{_flag} is set
					add 1 to {_n}
					set {_flags::%{_n}%} to {_flag}
				{_meta}.addItemFlags([{_flags::*} as ItemFlag])
			expr-1.setItemMeta({_meta})
			return expr-1
			
#
# ITEM OF ENCHANTMENTS
# Exactly like Skript's expression, but works for variables.
# 
# Usage:
# + diamond sword enchanted with {_enchantments::*}
# Result: [item] diamond sword
#
expression %item% enchanted with %enchantmenttypes%:
	return type: item
	get:
		set {_i} to expr-1.clone()
		loop exprs-2:
			set {_e} to loop-value
			enchant {_i} with {_e}
		return {_i}
			
#
# GLOWING ITEM
# Returns a glowing item (glows like it's enchanted, but doesn't show any).
#
# Usage:
# + glowing diamond sword
# Result: [item] diamond sword
# 
expression glowing %items%:
	return type: items
	get:
		loop exprs-1:
			add 1 to {_n}
			set {_i} to loop-value
			set {_r::%{_n}%} to {_i} enchanted with lure 1 with hideflags "ENCHANTS"
		return {_r::*} 
        